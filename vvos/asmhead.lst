     1 00000000                                 ; sys
     2 00000000                                 ; tab=4
     3 00000000                                 
     4 00000000                                 [INSTRSET "i486p"] 							; "想要使用486指令"的叙述
     5 00000000                                 
     6  = 00000105                              VBEMODE	EQU 	0x105 						; 画面模式号码
     7 00000000                                 
     8  = 00280000                              BOTPAK	EQU		0x00280000		; 加载bootpack
     9  = 00100000                              DSKCAC	EQU		0x00100000		; 磁盘缓存的位置
    10  = 00008000                              DSKCAC0	EQU		0x00008000		; 磁盘缓存的位置（实模式）
    11 00000000                                 
    12 00000000                                 ; 有关BOOT_INFO
    13  = 00000FF0                              CYLS 	EQU 	0x0ff0						; 设定启动区
    14  = 00000FF1                              LEDS 	EQU 	0x0ff1
    15  = 00000FF2                              VMODE 	EQU 	0x0ff2						; 关于颜色数目的信息。颜色的位数
    16  = 00000FF4                              SCRNX 	EQU 	0x0ff4						; 分辨率的X
    17  = 00000FF6                              SCRNY 	EQU 	0x0ff6						; 分辨率的Y
    18  = 00000FF8                              VRAM 	EQU 	0x0ff8						; 图像缓冲区的开始地址
    19 00000000                                 
    20 00000000                                 ; 这个程序将要被装载到内存的什么地方呢
    21                                          		ORG 	0xc200
    22 0000C200                                 
    23 0000C200                                 ; 确认VBE(VESA BIOS extension)是否存在
    24 0000C200 B8 9000                         		MOV 	AX, 0x9000
    25 0000C203 8E C0                           		MOV 	ES, AX
    26 0000C205 BF 0000                         		MOV 	DI, 0
    27 0000C208 B8 4F00                         		MOV 	AX, 0x4f00
    28 0000C20B CD 10                           		INT 	0x10
    29 0000C20D 3D 004F                         		CMP 	AX, 0x004f
    30 0000C210 75 52                           		JNE 	scrn320
    31 0000C212                                 
    32 0000C212                                 ; 检查VBE版本，不是2.0以上，不能使用高分辨率
    33 0000C212 26 8B 45 04                     		MOV 	AX, [ES:DI+4]
    34 0000C216 3D 0200                         		CMP 	AX, 0x0200
    35 0000C219 72 49                           		JB 		scrn320 					; if(AX < 0x0200) goto scrn320
    36 0000C21B                                 
    37 0000C21B                                 ; 取得画面模式信息，是否支持某画面模式号码
    38 0000C21B B9 0105                         		MOV 	CX, VBEMODE
    39 0000C21E B8 4F01                         		MOV 	AX, 0x4f01
    40 0000C221 CD 10                           		INT 	0x10
    41 0000C223 3D 004F                         		CMP 	AX, 0x004f
    42 0000C226 75 3C                           		JNE 	scrn320
    43 0000C228                                 
    44 0000C228                                 ; 画面模式信息的确认
    45 0000C228 26 80 7D 19 08                  		CMP 	BYTE [ES:DI+0x19], 8 		; 颜色数必须为8
    46 0000C22D 75 35                           		JNE 	scrn320
    47 0000C22F 26 80 7D 1B 04                  		CMP 	BYTE [ES:DI+0x1b], 4 		; 颜色的指定方法必须为4，调色板模式
    48 0000C234 75 2E                           		JNE 	scrn320
    49 0000C236 26 8B 05                        		MOV 	AX, [ES:DI+0x00] 			; 模式属性的bit7必须为1
    50 0000C239 25 0080                         		AND 	AX, 0x0080
    51 0000C23C 74 26                           		JZ 		scrn320
    52 0000C23E                                 
    53 0000C23E                                 ; 画面模式的切换
    54 0000C23E BB 4105                         		MOV 	BX, VBEMODE+0x4000
    55 0000C241 B8 4F02                         		MOV 	AX, 0x4f02
    56 0000C244 CD 10                           		INT 	0x10
    57 0000C246 C6 06 0FF2 08                   		MOV 	BYTE [VMODE], 8
    58 0000C24B 26 8B 45 12                     		MOV 	AX, [ES:DI+0x12]
    59 0000C24F A3 0FF4                         		MOV 	[SCRNX], AX
    60 0000C252 26 8B 45 14                     		MOV 	AX, [ES:DI+0x14]
    61 0000C256 A3 0FF6                         		MOV 	[SCRNY], AX
    62 0000C259 66 26 8B 45 28                  		MOV 	EAX, [ES:DI+0x28]
    63 0000C25E 66 A3 0FF8                      		MOV 	[VRAM], EAX
    64 0000C262 EB 20                           		JMP 	keystatus
    65 0000C264                                 
    66 0000C264                                 scrn320:
    67 0000C264                                 ; 显示
    68 0000C264                                 ; 320 * 200
    69 0000C264 B0 13                           		MOV		AL, 0x13 					; 画面模式号码
    70 0000C266 B4 00                           		MOV 	AH, 0x00 					; 旧画面模式
    71 0000C268 CD 10                           		INT 	0x10
    72 0000C26A                                 ; 记录画面模式
    73 0000C26A C6 06 0FF2 08                   		MOV 	BYTE [VMODE], 8
    74 0000C26F                                 ; 320 * 200
    75 0000C26F C7 06 0FF4 0140                 		MOV 	WORD [SCRNX], 320
    76 0000C275 C7 06 0FF6 00C8                 		MOV 	WORD [SCRNY], 200
    77 0000C27B 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM], 0x000a0000
    78 0000C284                                 
    79 0000C284                                 keystatus:
    80 0000C284                                 ; 用BIOS取得键盘上各种LED指示灯的状态
    81 0000C284 B4 02                           		MOV 	AH, 0x02
    82 0000C286 CD 16                           		INT 	0x16						; keyboard BIOS
    83 0000C288 A2 0FF1                         		MOV 	[LEDS], AL
    84 0000C28B                                 
    85 0000C28B                                 ; PIC关闭一切中断
    86 0000C28B                                 ;	根据AT兼容机的规格，如果要初始化PIC，
    87 0000C28B                                 ;	必须在CLI之前进行，否则有时会挂起。
    88 0000C28B                                 ;	进行PIC的初始化：
    89 0000C28B                                 
    90 0000C28B B0 FF                           		MOV 	AL, 0xff
    91 0000C28D E6 21                           		OUT 	0x21, AL 					; PIC0_IMR(io_out8(PIC0_IMR, 0xff))
    92 0000C28F 90                              		NOP 								; 如果连续执行OUT指令，有些机制会无法正常运行
    93 0000C290 E6 A1                           		OUT 	0xa1, AL 					; PIC1_IMR(io_out8(PIC1_IMR, 0xff))
    94 0000C292                                 
    95 0000C292 FA                              		CLI 								; 禁止CPU级别的中断(io_cli())
    96 0000C293                                 
    97 0000C293                                 ; 为了让CPU能够访问1MB以上的内存空间，设定A20GATE
    98 0000C293 E8 00B5                         		CALL 	waitkbdout 					; wait_KBC_sendready()
    99 0000C296 B0 D1                           		MOV 	AL, 0xd1
   100 0000C298 E6 64                           		OUT 	0x64, AL 					; io_out8(PORT_KEYCMD, KEYCMD_WRITE_OUTPORT)
   101 0000C29A E8 00AE                         		CALL 	waitkbdout 					; wait_KBC_sendready()
   102 0000C29D B0 DF                           		MOV 	AL, 0xdf
   103 0000C29F E6 60                           		OUT 	0x60, AL 					; io_out8(PORT_KEYDAT, KBC_OUTPORT_A20G_ENABLE)
   104 0000C2A1 E8 00A7                         		CALL 	waitkbdout 					; wait_KBC_sendready() 这句话是为了等待完成执行指令
   105 0000C2A4                                 
   106 0000C2A4                                 ; 切换到保护模式
   107 0000C2A4                                 [INSTRSET "i486p"] 							; "想要使用486指令"的叙述
   108 0000C2A4 0F 01 16 C38A                   		LGDT 	[GDTR0] 					; 设定临时GDT
   109 0000C2A9 0F 20 C0                        		MOV 	EAX, CR0
   110 0000C2AC 66 25 7FFFFFFF                  		AND 	EAX, 0x7fffffff 			; 设bit31为0（禁止分页）
   111 0000C2B2 66 83 C8 01                     		OR 		EAX, 0x00000001 			; 设bit0为1（切换到保护模式）
   112 0000C2B6 0F 22 C0                        		MOV 	CR0, EAX
   113 0000C2B9 EB 00                           		JMP 	pipelineflush
   114 0000C2BB                                 
   115 0000C2BB                                 ; 管道刷新
   116 0000C2BB                                 ; 管道机制：前一条指令还在执行的时候，就开始解释下一条甚至是再一下条指令
   117 0000C2BB                                 pipelineflush:
   118 0000C2BB B8 0008                         		MOV 	AX, 1*8 					; 可读写段号<<3 系统段
   119 0000C2BE 8E D8                           		MOV 	DS, AX
   120 0000C2C0 8E C0                           		MOV 	ES, AX
   121 0000C2C2 8E E0                           		MOV 	FS, AX
   122 0000C2C4 8E E8                           		MOV 	GS, AX
   123 0000C2C6 8E D0                           		MOV 	SS, AX
   124 0000C2C8                                 
   125 0000C2C8                                 ; bootpack的转送
   126 0000C2C8                                 ; memcpy(bootpack, BOTPAK, 512*1024/4)
   127 0000C2C8 66 BE 0000C390                  		MOV 	ESI, bootpack 				; 转送源
   128 0000C2CE 66 BF 00280000                  		MOV 	EDI, BOTPAK 				; 转送目的地
   129 0000C2D4 66 B9 00020000                  		MOV 	ECX, 512*1024/4
   130 0000C2DA E8 0077                         		CALL 	memcpy
   131 0000C2DD                                 
   132 0000C2DD                                 ; 磁盘数据最终转送到它本来的位置去
   133 0000C2DD                                 
   134 0000C2DD                                 ; 启动扇区的转送
   135 0000C2DD                                 ; memcpy(0x7c00, DSKCAC, 512/4)
   136 0000C2DD 66 BE 00007C00                  		MOV 	ESI, 0x7c00
   137 0000C2E3 66 BF 00100000                  		MOV 	EDI, DSKCAC
   138 0000C2E9 66 B9 00000080                  		MOV 	ECX, 512/4
   139 0000C2EF E8 0062                         		CALL 	memcpy
   140 0000C2F2                                 
   141 0000C2F2                                 ; 其他的转送
   142 0000C2F2                                 ; memcpy(DSKCAC0+512, DSKCAC+512, cyls*512*18*2/4 - 512/4)
   143 0000C2F2 66 BE 00008200                  		MOV 	ESI, DSKCAC0+512
   144 0000C2F8 66 BF 00100200                  		MOV 	EDI, DSKCAC+512
   145 0000C2FE 66 B9 00000000                  		MOV 	ECX, 0
   146 0000C304 8A 0E 0FF0                      		MOV 	CL, BYTE [CYLS]
   147 0000C308 66 69 C9 00001200               		IMUL 	ECX, 512*18*2/4 			; 剩余柱面
   148 0000C30F 66 81 E9 00000080               		SUB 	ECX, 512/4 					; 减去IPL
   149 0000C316 E8 003B                         		CALL 	memcpy
   150 0000C319                                 
   151 0000C319                                 ; 必须由asmhead来完成的工作，至此全部完毕
   152 0000C319                                 ; 以后就交由bootpack来完成
   153 0000C319                                 
   154 0000C319                                 ; bootpack启动
   155 0000C319                                 
   156 0000C319 66 BB 00280000                  		MOV 	EBX, BOTPAK
   157 0000C31F 67 66 8B 4B 10                  		MOV 	ECX, [EBX+16]
   158 0000C324 66 83 C1 03                     		ADD 	ECX, 3
   159 0000C328 66 C1 E9 02                     		SHR 	ECX, 2
   160 0000C32C 74 10                           		JZ 		skip 						; 没有要转送的东西时
   161 0000C32E 67 66 8B 73 14                  		MOV 	ESI, [EBX+20]
   162 0000C333 66 01 DE                        		ADD 	ESI, EBX
   163 0000C336 67 66 8B 7B 0C                  		MOV 	EDI, [EBX+12]
   164 0000C33B E8 0016                         		CALL 	memcpy
   165 0000C33E                                 skip:
   166 0000C33E 67 66 8B 63 0C                  		MOV 	ESP, [EBX+12] 				; 栈初始值
   167 0000C343 66 EA 0000001B 0010             		JMP 	DWORD 2*8:0x0000001b 		; 跳转到段号2的0x001b
   168 0000C34B                                 
   169 0000C34B                                 waitkbdout:
   170 0000C34B E4 64                           		IN 		AL, 0x64
   171 0000C34D 24 02                           		AND 	AL, 0x02
   172 0000C34F E4 60                           		IN 		AL, 0x60 					; 空读（为了清空数据接收缓冲区中的垃圾数据）
   173 0000C351 75 F8                           		JNZ 	waitkbdout 					; AND的结果如果不是0，就跳到waitkbdout
   174 0000C353 C3                              		RET
   175 0000C354                                 
   176 0000C354                                 memcpy:
   177 0000C354 67 66 8B 06                     		MOV 	EAX, [ESI]
   178 0000C358 66 83 C6 04                     		ADD 	ESI, 4
   179 0000C35C 67 66 89 07                     		MOV 	[EDI], EAX
   180 0000C360 66 83 C7 04                     		ADD 	EDI, 4
   181 0000C364 66 83 E9 01                     		SUB 	ECX, 1
   182 0000C368 75 EA                           		JNZ 	memcpy 						; 减法运算的结果如果不是0，就跳转到memcpy
   183 0000C36A C3                              		RET
   184 0000C36B                                 
   185 0000C36B                                 ; 双字节对齐，填充字符为0x00
   186 0000C36B 00 00 00 00 00                  		ALIGNB 	16
   187 0000C370                                 GDT0:
   188 0000C370 00 00 00 00 00 00 00 00         		RESB 	8 									; 第0段为空
   189 0000C378 FFFF 0000 9200 00CF             		DW 		0xffff, 0x0000, 0x9200, 0x00cf 		; 第1段的数据结构值 set_segmdesc(gdt + 1, 0xffffffff, 0x00000000, AR_DATA32_RW)
   190 0000C380 FFFF 0000 9A28 0047             		DW 		0xffff, 0x0000, 0x9a28, 0x0047 		; 第2段的数据结构值 set_segmdesc(gdt + 2, LIMIT_BOTPAK, ADR_BOTPAK, AR_CODE32_ER)
   191 0000C388                                 
   192 0000C388 0000                            		DW 		0 									; 为什么要空一格？是为了校验越界吗？
   193 0000C38A                                 GDTR0:
   194 0000C38A 0017                            		DW 		8*3-1 								; 段数据结构大小*个数-1、段信息表的有效大小-1、LIMIT_GDT
   195 0000C38C 0000C370                        		DD 		GDT0 								; 段信息表的地址、ADR_GDT load_gdtr(LIMIT_GDT, ADR_GDT)
   196 0000C390                                 
   197 0000C390                                 		ALIGNB 	16
   198 0000C390                                 bootpack: