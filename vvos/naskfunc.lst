     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 要*.c文件的编译结果进行连接，因此使用对象文件模式
     5 00000000                                 [INSTRSET "i486p"]				; 表示使用486兼容指令集
     6 00000000                                 [BITS 32]						; 生成32位模式机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 源文件名
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL 	_asm_inthandler21, _asm_inthandler2c, _asm_inthandler20, _asm_inthandler0d, _asm_inthandler0c
    15 00000000                                 		EXTERN 	_inthandler21, _inthandler2c, _inthandler20, _inthandler0d, _inthandler0c
    16 00000000                                 		GLOBAL 	_load_cr0, _store_cr0
    17 00000000                                 		GLOBAL 	_memtest_sub
    18 00000000                                 		GLOBAL 	_load_tr, _taskswitch4, _taskswitch3, _farjmp, _farcall
    19 00000000                                 		EXTERN 	_cons_putchar, _hrb_api
    20 00000000                                 		GLOBAL 	_asm_cons_putchar, _asm_hrb_api
    21 00000000                                 		GLOBAL 	_start_app, _asm_end_app
    22 00000000                                 
    23                                          [SECTION .text]
    24 00000000                                 
    25 00000000                                 _io_hlt:	; void io_hlt(void);
    26 00000000 F4                              		HLT
    27 00000001 C3                              		RET
    28 00000002                                 
    29 00000002                                 _io_cli:	; void io_cli(void);
    30 00000002 FA                              		CLI
    31 00000003 C3                              		RET
    32 00000004                                 
    33 00000004                                 _io_sti:	; void io_sti(void);
    34 00000004 FB                              		STI
    35 00000005 C3                              		RET
    36 00000006                                 
    37 00000006                                 _io_stihlt:	; void io_stihlt(void);
    38 00000006 FB                              		STI
    39 00000007 F4                              		HLT
    40 00000008 C3                              		RET
    41 00000009                                 
    42 00000009                                 _io_in8:	; int io_in8(int port);
    43 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    44 0000000D B8 00000000                     		MOV		EAX,0
    45 00000012 EC                              		IN		AL,DX
    46 00000013 C3                              		RET
    47 00000014                                 
    48 00000014                                 _io_in16:	; int io_in16(int port);
    49 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 00000018 B8 00000000                     		MOV		EAX,0
    51 0000001D 66 ED                           		IN		AX,DX
    52 0000001F C3                              		RET
    53 00000020                                 
    54 00000020                                 _io_in32:	; int io_in32(int port);
    55 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000024 ED                              		IN		EAX,DX
    57 00000025 C3                              		RET
    58 00000026                                 
    59 00000026                                 _io_out8:	; void io_out8(int port, int data);
    60 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    61 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    62 0000002E EE                              		OUT		DX,AL
    63 0000002F C3                              		RET
    64 00000030                                 
    65 00000030                                 _io_out16:	; void io_out16(int port, int data);
    66 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    67 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    68 00000038 66 EF                           		OUT		DX,AX
    69 0000003A C3                              		RET
    70 0000003B                                 
    71 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    72 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    74 00000043 EF                              		OUT		DX,EAX
    75 00000044 C3                              		RET
    76 00000045                                 
    77 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    78 00000045 9C                              		PUSHFD		; PUSH EFLAGS 
    79 00000046 58                              		POP		EAX
    80 00000047 C3                              		RET
    81 00000048                                 
    82 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    83 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    84 0000004C 50                              		PUSH	EAX
    85 0000004D 9D                              		POPFD		; POP EFLAGS 
    86 0000004E C3                              		RET
    87 0000004F                                 
    88 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    89 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    90 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    91 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    92 0000005E C3                              		RET
    93 0000005F                                 
    94 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    95 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    96 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    97 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    98 0000006E C3                              		RET
    99 0000006F                                 
   100 0000006F                                 _asm_inthandler21:
   101 0000006F 06                              		PUSH 	ES
   102 00000070 1E                              		PUSH 	DS
   103 00000071 60                              		PUSHAD
   104 00000072 89 E0                           		MOV 	EAX, ESP
   105 00000074 50                              		PUSH 	EAX
   106 00000075 66 8C D0                        		MOV 	AX, SS
   107 00000078 8E D8                           		MOV 	DS, AX
   108 0000007A 8E C0                           		MOV 	ES, AX
   109 0000007C E8 [00000000]                   		CALL 	_inthandler21
   110 00000081 58                              		POP 	EAX
   111 00000082 61                              		POPAD
   112 00000083 1F                              		POP 	DS
   113 00000084 07                              		POP 	ES
   114 00000085 CF                              		IRETD
   115 00000086                                 
   116 00000086                                 _asm_inthandler2c:
   117 00000086 06                              		PUSH 	ES
   118 00000087 1E                              		PUSH 	DS
   119 00000088 60                              		PUSHAD
   120 00000089 89 E0                           		MOV 	EAX, ESP
   121 0000008B 50                              		PUSH 	EAX
   122 0000008C 66 8C D0                        		MOV 	AX, SS
   123 0000008F 8E D8                           		MOV 	DS, AX
   124 00000091 8E C0                           		MOV 	ES, AX
   125 00000093 E8 [00000000]                   		CALL 	_inthandler2c
   126 00000098 58                              		POP 	EAX
   127 00000099 61                              		POPAD
   128 0000009A 1F                              		POP 	DS
   129 0000009B 07                              		POP 	ES
   130 0000009C CF                              		IRETD
   131 0000009D                                 
   132 0000009D                                 _asm_inthandler20:
   133 0000009D 06                              		PUSH 	ES
   134 0000009E 1E                              		PUSH 	DS
   135 0000009F 60                              		PUSHAD
   136 000000A0 89 E0                           		MOV 	EAX, ESP
   137 000000A2 50                              		PUSH 	EAX
   138 000000A3 66 8C D0                        		MOV 	AX, SS
   139 000000A6 8E D8                           		MOV 	DS, AX
   140 000000A8 8E C0                           		MOV 	ES, AX
   141 000000AA E8 [00000000]                   		CALL 	_inthandler20
   142 000000AF 58                              		POP 	EAX
   143 000000B0 61                              		POPAD
   144 000000B1 1F                              		POP 	DS
   145 000000B2 07                              		POP 	ES
   146 000000B3 CF                              		IRETD
   147 000000B4                                 
   148 000000B4                                 _asm_inthandler0d:
   149 000000B4 FB                              		STI
   150 000000B5 06                              		PUSH 	ES
   151 000000B6 1E                              		PUSH 	DS
   152 000000B7 60                              		PUSHAD
   153 000000B8 89 E0                           		MOV 	EAX, ESP
   154 000000BA 50                              		PUSH 	EAX
   155 000000BB 66 8C D0                        		MOV 	AX, SS
   156 000000BE 8E D8                           		MOV 	DS, AX
   157 000000C0 8E C0                           		MOV 	ES, AX
   158 000000C2 E8 [00000000]                   		CALL 	_inthandler0d
   159 000000C7 83 F8 00                        		CMP 	EAX, 0
   160 000000CA 0F 85 00000236                  		JNE 	_asm_end_app
   161 000000D0 58                              		POP 	EAX
   162 000000D1 61                              		POPAD
   163 000000D2 1F                              		POP 	DS
   164 000000D3 07                              		POP 	ES
   165 000000D4 83 C4 04                        		ADD 	ESP, 4
   166 000000D7 CF                              		IRETD
   167 000000D8                                 
   168 000000D8                                 _asm_inthandler0c:
   169 000000D8 FB                              		STI
   170 000000D9 06                              		PUSH 	ES
   171 000000DA 1E                              		PUSH 	DS
   172 000000DB 60                              		PUSHAD
   173 000000DC 89 E0                           		MOV 	EAX, ESP
   174 000000DE 50                              		PUSH 	EAX
   175 000000DF 66 8C D0                        		MOV 	AX, SS
   176 000000E2 8E D8                           		MOV 	DS, AX
   177 000000E4 8E C0                           		MOV 	ES, AX
   178 000000E6 E8 [00000000]                   		CALL 	_inthandler0c
   179 000000EB 83 F8 00                        		CMP 	EAX, 0
   180 000000EE 0F 85 00000212                  		JNE 	_asm_end_app
   181 000000F4 58                              		POP 	EAX
   182 000000F5 61                              		POPAD
   183 000000F6 1F                              		POP 	DS
   184 000000F7 07                              		POP 	ES
   185 000000F8 83 C4 04                        		ADD 	ESP, 4
   186 000000FB CF                              		IRETD
   187 000000FC                                 
   188 000000FC                                 ;_asm_inthandler21:
   189 000000FC 06                              		PUSH 	ES
   190 000000FD 1E                              		PUSH 	DS
   191 000000FE 60                              		PUSHAD
   192 000000FF                                 
   193 000000FF                                 		; 用户态需要特殊处理
   194 000000FF 66 8C D0                        		MOV 	AX, SS
   195 00000102 66 3D 0008                      		CMP 	AX, 1*8
   196 00000106 75 17                           		JNE 	.from_app_i21
   197 00000108                                 
   198 00000108                                 		; 入栈ESP、SS
   199 00000108 89 E0                           		MOV 	EAX, ESP
   200 0000010A 16                              		PUSH 	SS
   201 0000010B 50                              		PUSH 	EAX
   202 0000010C 66 8C D0                        		MOV 	AX, SS
   203 0000010F 8E D8                           		MOV 	DS, AX
   204 00000111 8E C0                           		MOV 	ES, AX
   205 00000113                                 
   206 00000113 E8 [00000000]                   		CALL 	_inthandler21
   207 00000118                                 
   208 00000118                                 		; 丢弃SS、ESP
   209 00000118 83 C4 08                        		ADD 	ESP, 8
   210 0000011B                                 
   211 0000011B 61                              		POPAD
   212 0000011C 1F                              		POP 	DS
   213 0000011D 07                              		POP 	ES
   214 0000011E CF                              		IRETD
   215 0000011F                                 
   216 0000011F                                 .from_app_i21:
   217 0000011F B8 00000008                     		MOV 	EAX, 1*8
   218 00000124                                 		; 数据段寄存器指向系统段
   219 00000124 8E D8                           		MOV 	DS, AX
   220 00000126                                 
   221 00000126                                 		; 读取系统栈的高度
   222 00000126 8B 0D 00000FE4                  		MOV 	ECX, [0x0fe4]
   223 0000012C                                 
   224 0000012C                                 		; 保存应用程序的SS、ESP
   225 0000012C 83 C1 F8                        		ADD 	ECX, -8
   226 0000012F 8C 51 04                        		MOV 	[ECX+4], SS
   227 00000132 89 21                           		MOV 	[ECX], ESP
   228 00000134                                 
   229 00000134                                 		; 填入系统的段寄存器
   230 00000134 8E D0                           		MOV 	SS, AX
   231 00000136 8E C0                           		MOV 	ES, AX
   232 00000138                                 		; 设置系统的栈指针
   233 00000138 89 CC                           		MOV 	ESP, ECX
   234 0000013A                                 
   235 0000013A                                 		; 进入系统调用
   236 0000013A E8 [00000000]                   		CALL 	_inthandler21
   237 0000013F                                 
   238 0000013F                                 		; 恢复应用程序的SS、ESP
   239 0000013F 59                              		POP 	ECX
   240 00000140 58                              		POP 	EAX
   241 00000141 8E D0                           		MOV 	SS, AX
   242 00000143 89 CC                           		MOV 	ESP, ECX
   243 00000145                                 
   244 00000145 61                              		POPAD
   245 00000146 1F                              		POP 	DS
   246 00000147 07                              		POP 	ES
   247 00000148 CF                              		IRETD
   248 00000149                                 
   249 00000149                                 ;_asm_inthandler2c:
   250 00000149 06                              		PUSH 	ES
   251 0000014A 1E                              		PUSH 	DS
   252 0000014B 60                              		PUSHAD
   253 0000014C                                 
   254 0000014C                                 		; 用户态需要特殊处理
   255 0000014C 66 8C D0                        		MOV 	AX, SS
   256 0000014F 66 3D 0008                      		CMP 	AX, 1*8
   257 00000153 75 17                           		JNE 	.from_app_i2c
   258 00000155                                 
   259 00000155                                 		; 入栈ESP、SS
   260 00000155 89 E0                           		MOV 	EAX, ESP
   261 00000157 16                              		PUSH 	SS
   262 00000158 50                              		PUSH 	EAX
   263 00000159 66 8C D0                        		MOV 	AX, SS
   264 0000015C 8E D8                           		MOV 	DS, AX
   265 0000015E 8E C0                           		MOV 	ES, AX
   266 00000160                                 
   267 00000160 E8 [00000000]                   		CALL 	_inthandler2c
   268 00000165                                 
   269 00000165                                 		; 丢弃SS、ESP
   270 00000165 83 C4 08                        		ADD 	ESP, 8
   271 00000168                                 
   272 00000168 61                              		POPAD
   273 00000169 1F                              		POP 	DS
   274 0000016A 07                              		POP 	ES
   275 0000016B CF                              		IRETD
   276 0000016C                                 
   277 0000016C                                 .from_app_i2c:
   278 0000016C B8 00000008                     		MOV 	EAX, 1*8
   279 00000171                                 		; 数据段寄存器指向系统段
   280 00000171 8E D8                           		MOV 	DS, AX
   281 00000173                                 
   282 00000173                                 		; 读取系统栈的高度
   283 00000173 8B 0D 00000FE4                  		MOV 	ECX, [0x0fe4]
   284 00000179                                 
   285 00000179                                 		; 保存应用程序的SS、ESP
   286 00000179 83 C1 F8                        		ADD 	ECX, -8
   287 0000017C 8C 51 04                        		MOV 	[ECX+4], SS
   288 0000017F 89 21                           		MOV 	[ECX], ESP
   289 00000181                                 
   290 00000181                                 		; 填入系统的段寄存器
   291 00000181 8E D0                           		MOV 	SS, AX
   292 00000183 8E C0                           		MOV 	ES, AX
   293 00000185                                 		; 设置系统的栈指针
   294 00000185 89 CC                           		MOV 	ESP, ECX
   295 00000187                                 
   296 00000187                                 		; 进入系统调用
   297 00000187 E8 [00000000]                   		CALL 	_inthandler2c
   298 0000018C                                 
   299 0000018C                                 		; 恢复应用程序的SS、ESP
   300 0000018C 59                              		POP 	ECX
   301 0000018D 58                              		POP 	EAX
   302 0000018E 8E D0                           		MOV 	SS, AX
   303 00000190 89 CC                           		MOV 	ESP, ECX
   304 00000192                                 
   305 00000192 61                              		POPAD
   306 00000193 1F                              		POP 	DS
   307 00000194 07                              		POP 	ES
   308 00000195 CF                              		IRETD
   309 00000196                                 
   310 00000196                                 ;_asm_inthandler20:
   311 00000196 06                              		PUSH 	ES
   312 00000197 1E                              		PUSH 	DS
   313 00000198 60                              		PUSHAD
   314 00000199                                 
   315 00000199                                 		; 用户态需要特殊处理
   316 00000199 66 8C D0                        		MOV 	AX, SS
   317 0000019C 66 3D 0008                      		CMP 	AX, 1*8
   318 000001A0 75 17                           		JNE 	.from_app_i20
   319 000001A2                                 
   320 000001A2                                 		; 入栈ESP、SS
   321 000001A2 89 E0                           		MOV 	EAX, ESP
   322 000001A4 16                              		PUSH 	SS
   323 000001A5 50                              		PUSH 	EAX
   324 000001A6 66 8C D0                        		MOV 	AX, SS
   325 000001A9 8E D8                           		MOV 	DS, AX
   326 000001AB 8E C0                           		MOV 	ES, AX
   327 000001AD                                 
   328 000001AD E8 [00000000]                   		CALL 	_inthandler20
   329 000001B2                                 
   330 000001B2                                 		; 丢弃SS、ESP
   331 000001B2 83 C4 08                        		ADD 	ESP, 8
   332 000001B5                                 
   333 000001B5 61                              		POPAD
   334 000001B6 1F                              		POP 	DS
   335 000001B7 07                              		POP 	ES
   336 000001B8 CF                              		IRETD
   337 000001B9                                 
   338 000001B9                                 .from_app_i20:
   339 000001B9 B8 00000008                     		MOV 	EAX, 1*8
   340 000001BE                                 		; 数据段寄存器指向系统段
   341 000001BE 8E D8                           		MOV 	DS, AX
   342 000001C0                                 
   343 000001C0                                 		; 读取系统栈的高度
   344 000001C0 8B 0D 00000FE4                  		MOV 	ECX, [0x0fe4]
   345 000001C6                                 
   346 000001C6                                 		; 保存应用程序的SS、ESP
   347 000001C6 83 C1 F8                        		ADD 	ECX, -8
   348 000001C9 8C 51 04                        		MOV 	[ECX+4], SS
   349 000001CC 89 21                           		MOV 	[ECX], ESP
   350 000001CE                                 
   351 000001CE                                 		; 填入系统的段寄存器
   352 000001CE 8E D0                           		MOV 	SS, AX
   353 000001D0 8E C0                           		MOV 	ES, AX
   354 000001D2                                 		; 设置系统的栈指针
   355 000001D2 89 CC                           		MOV 	ESP, ECX
   356 000001D4                                 
   357 000001D4                                 		; 进入系统调用
   358 000001D4 E8 [00000000]                   		CALL 	_inthandler20
   359 000001D9                                 
   360 000001D9                                 		; 恢复应用程序的SS、ESP
   361 000001D9 59                              		POP 	ECX
   362 000001DA 58                              		POP 	EAX
   363 000001DB 8E D0                           		MOV 	SS, AX
   364 000001DD 89 CC                           		MOV 	ESP, ECX
   365 000001DF                                 
   366 000001DF 61                              		POPAD
   367 000001E0 1F                              		POP 	DS
   368 000001E1 07                              		POP 	ES
   369 000001E2 CF                              		IRETD
   370 000001E3                                 
   371 000001E3                                 ;_asm_inthandler0d:
   372 000001E3 FB                              		STI
   373 000001E4 06                              		PUSH 	ES
   374 000001E5 1E                              		PUSH 	DS
   375 000001E6 60                              		PUSHAD
   376 000001E7                                 
   377 000001E7                                 		; 用户态需要特殊处理
   378 000001E7 66 8C D0                        		MOV 	AX, SS
   379 000001EA 66 3D 0008                      		CMP 	AX, 1*8
   380 000001EE 75 1A                           		JNE 	.from_app_i0d
   381 000001F0                                 
   382 000001F0                                 		; 入栈ESP、SS
   383 000001F0 89 E0                           		MOV 	EAX, ESP
   384 000001F2 16                              		PUSH 	SS
   385 000001F3 50                              		PUSH 	EAX
   386 000001F4 66 8C D0                        		MOV 	AX, SS
   387 000001F7 8E D8                           		MOV 	DS, AX
   388 000001F9 8E C0                           		MOV 	ES, AX
   389 000001FB                                 
   390 000001FB E8 [00000000]                   		CALL 	_inthandler0d
   391 00000200                                 
   392 00000200                                 		; 丢弃SS、ESP
   393 00000200 83 C4 08                        		ADD 	ESP, 8
   394 00000203                                 
   395 00000203 61                              		POPAD
   396 00000204 1F                              		POP 	DS
   397 00000205 07                              		POP 	ES
   398 00000206 83 C4 04                        		ADD 	ESP, 4
   399 00000209 CF                              		IRETD
   400 0000020A                                 
   401 0000020A                                 .from_app_i0d:
   402 0000020A FA                              		CLI
   403 0000020B B8 00000008                     		MOV 	EAX, 1*8
   404 00000210                                 		; 数据段寄存器指向系统段
   405 00000210 8E D8                           		MOV 	DS, AX
   406 00000212                                 
   407 00000212                                 		; 读取系统栈的高度
   408 00000212 8B 0D 00000FE4                  		MOV 	ECX, [0x0fe4]
   409 00000218                                 
   410 00000218                                 		; 保存应用程序的SS、ESP
   411 00000218 83 C1 F8                        		ADD 	ECX, -8
   412 0000021B 8C 51 04                        		MOV 	[ECX+4], SS
   413 0000021E 89 21                           		MOV 	[ECX], ESP
   414 00000220                                 
   415 00000220                                 		; 填入系统的段寄存器
   416 00000220 8E D0                           		MOV 	SS, AX
   417 00000222 8E C0                           		MOV 	ES, AX
   418 00000224                                 		; 设置系统的栈指针
   419 00000224 89 CC                           		MOV 	ESP, ECX
   420 00000226 FB                              		STI
   421 00000227                                 
   422 00000227                                 		; 进入系统调用
   423 00000227 E8 [00000000]                   		CALL 	_inthandler0d
   424 0000022C                                 
   425 0000022C FA                              		CLI
   426 0000022D 83 F8 00                        		CMP 	EAX, 0
   427 00000230 75 0D                           		JNE 	.kill_i0d
   428 00000232                                 		; 恢复应用程序的SS、ESP
   429 00000232 59                              		POP 	ECX
   430 00000233 58                              		POP 	EAX
   431 00000234 8E D0                           		MOV 	SS, AX
   432 00000236 89 CC                           		MOV 	ESP, ECX
   433 00000238                                 
   434 00000238 61                              		POPAD
   435 00000239 1F                              		POP 	DS
   436 0000023A 07                              		POP 	ES
   437 0000023B 83 C4 04                        		ADD 	ESP, 4
   438 0000023E CF                              		IRETD
   439 0000023F                                 
   440 0000023F                                 .kill_i0d:
   441 0000023F 66 B8 0008                      		MOV 	AX, 1*8
   442 00000243 8E C0                           		MOV 	ES, AX
   443 00000245 8E D0                           		MOV 	SS, AX
   444 00000247 8E D8                           		MOV 	DS, AX
   445 00000249 8E E0                           		MOV 	FS, AX
   446 0000024B 8E E8                           		MOV 	GS, AX
   447 0000024D 8B 25 00000FE4                  		MOV 	ESP, [0x0fe4]
   448 00000253 FB                              		STI
   449 00000254 61                              		POPAD
   450 00000255 C3                              		RET
   451 00000256                                 
   452 00000256                                 _load_cr0:
   453 00000256 0F 20 C0                        		MOV 	EAX, CR0
   454 00000259 C3                              		RET
   455 0000025A                                 
   456 0000025A                                 _store_cr0:
   457 0000025A 8B 44 24 04                     		MOV 	EAX, [ESP+4]
   458 0000025E 0F 22 C0                        		MOV 	CR0, EAX
   459 00000261 C3                              		RET
   460 00000262                                 
   461 00000262                                 _memtest_sub: 	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   462 00000262 56                              		PUSH 	ESI
   463 00000263 57                              		PUSH 	EDI
   464 00000264 53                              		PUSH 	EBX
   465 00000265 BE AA55AA55                     		MOV 	ESI, 0xaa55aa55
   466 0000026A BF 55AA55AA                     		MOV 	EDI, 0x55aa55aa
   467 0000026F 8B 44 24 10                     		MOV 	EAX, [ESP+12+4]
   468 00000273                                 mts_loop:
   469 00000273 3B 44 24 14                     		CMP 	EAX, [ESP+12+8]
   470 00000277 77 25                           		JA	 	mts_fin
   471 00000279 89 C3                           		MOV 	EBX, EAX
   472 0000027B 81 C3 00000FFC                  		ADD 	EBX, 0x0ffc
   473 00000281 8B 13                           		MOV 	EDX, [EBX]
   474 00000283 89 33                           		MOV 	[EBX], ESI
   475 00000285 83 33 FF                        		XOR 	DWORD [EBX], 0xffffffff
   476 00000288 3B 3B                           		CMP 	EDI, [EBX]
   477 0000028A 75 10                           		JNE 	mts_rcv
   478 0000028C 83 33 FF                        		XOR 	DWORD [EBX], 0xffffffff
   479 0000028F 3B 33                           		CMP 	ESI, [EBX]
   480 00000291 75 09                           		JNE 	mts_rcv
   481 00000293 89 13                           		MOV 	[EBX], EDX
   482 00000295 05 00001000                     		ADD 	EAX, 0x1000
   483 0000029A EB D7                           		JMP 	mts_loop
   484 0000029C                                 mts_rcv:
   485 0000029C 89 13                           		MOV 	[EBX], EDX
   486 0000029E                                 mts_fin:
   487 0000029E 5B                              		POP 	EBX
   488 0000029F 5F                              		POP 	EDI
   489 000002A0 5E                              		POP 	ESI
   490 000002A1 C3                              		RET
   491 000002A2                                 
   492 000002A2                                 _load_tr:
   493 000002A2 0F 00 5C 24 04                  		LTR 	[ESP+4]
   494 000002A7 C3                              		RET
   495 000002A8                                 
   496 000002A8                                 _taskswitch4:
   497 000002A8 EA 00000000 0020                		JMP 	4*8:0
   498 000002AF C3                              		RET
   499 000002B0                                 
   500 000002B0                                 _taskswitch3:
   501 000002B0 EA 00000000 0018                		JMP 	3*8:0
   502 000002B7 C3                              		RET
   503 000002B8                                 
   504 000002B8                                 _farjmp: 						; void farjmp(int eip, int cs);
   505 000002B8 FF 6C 24 04                     		JMP 	FAR [ESP+4] 	; JMP FAR指令，先从栈取4个字节放入EIP，再取2个字节放入CS
   506 000002BC C3                              		RET
   507 000002BD                                 
   508 000002BD                                 _farcall:
   509 000002BD FF 5C 24 04                     		CALL 	FAR [ESP+4]
   510 000002C1 C3                              		RET
   511 000002C2                                 
   512 000002C2                                 _asm_cons_putchar:
   513 000002C2 FB                              		STI
   514 000002C3 60                              		PUSHAD
   515 000002C4 6A 01                           		PUSH 	1
   516 000002C6 25 000000FF                     		AND 	EAX, 0xff
   517 000002CB 50                              		PUSH 	EAX
   518 000002CC FF 35 00000FEC                  		PUSH 	DWORD [0x0fec]
   519 000002D2 E8 [00000000]                   		CALL 	_cons_putchar
   520 000002D7 83 C4 0C                        		ADD 	ESP, 12
   521 000002DA 61                              		POPAD
   522 000002DB CF                              		IRETD
   523 000002DC                                 
   524 000002DC                                 ;_asm_hrb_api:
   525 000002DC FB                              		STI
   526 000002DD 60                              		PUSHAD
   527 000002DE 60                              		PUSHAD
   528 000002DF E8 [00000000]                   		CALL 	_hrb_api
   529 000002E4 83 C4 20                        		ADD 	ESP, 32
   530 000002E7 61                              		POPAD
   531 000002E8 CF                              		IRETD
   532 000002E9                                 
   533 000002E9                                 _asm_hrb_api:
   534 000002E9 FB                              		STI
   535 000002EA                                 
   536 000002EA                                 		; 将要从用户态转到系统态，想从系统态恢复回用户态，就要入栈应用程序的寄存器
   537 000002EA 1E                              		PUSH 	DS
   538 000002EB 06                              		PUSH 	ES
   539 000002EC                                 		; 保存应用程序的寄存器
   540 000002EC 60                              		PUSHAD
   541 000002ED                                 		; 向hrb_api传值
   542 000002ED 60                              		PUSHAD
   543 000002EE                                 
   544 000002EE 66 8C D0                        		MOV 	AX, SS
   545 000002F1                                 		; 填入操作系统的段寄存器
   546 000002F1 8E D8                           		MOV 	DS, AX
   547 000002F3 8E C0                           		MOV 	ES, AX
   548 000002F5                                 
   549 000002F5                                 		; 进入系统调用
   550 000002F5 E8 [00000000]                   		CALL 	_hrb_api
   551 000002FA                                 
   552 000002FA                                 		; 当EAX不为0时程序结束
   553 000002FA 83 F8 00                        		CMP 	EAX, 0
   554 000002FD 75 07                           		JNE 	_asm_end_app
   555 000002FF                                 
   556 000002FF 83 C4 20                        		ADD 	ESP, 32
   557 00000302                                 		; 恢复应用程序的栈指针
   558 00000302 61                              		POPAD
   559 00000303 07                              		POP 	ES
   560 00000304 1F                              		POP 	DS
   561 00000305                                 
   562 00000305                                 		;从中断返回指令(IRET)自动执行STI
   563 00000305 CF                              		IRETD
   564 00000306                                 
   565 00000306                                 _asm_end_app:
   566 00000306                                 		; EAX为tss.esp0的地址
   567 00000306 8B 20                           		MOV 	ESP, [EAX]
   568 00000308 C7 40 04 00000000               		MOV 	DWORD [EAX+4], 0
   569 0000030F 61                              		POPAD
   570 00000310                                 		; 返回cmd_app
   571 00000310 C3                              		RET
   572 00000311                                 
   573 00000311                                 _start_app: 						; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0)
   574 00000311                                 		; 将要从系统态转到用户态，想从用户态恢复回系统态，就要入栈操作系统的寄存器
   575 00000311 60                              		PUSHAD
   576 00000312                                 
   577 00000312                                 		; 读取参数，用户态的代码段和数据段
   578 00000312 8B 44 24 24                     		MOV 	EAX, [ESP+32+4] 	; 应用程序EIP 		指令指针寄存器
   579 00000316 8B 4C 24 28                     		MOV 	ECX, [ESP+32+8] 	; 应用程序CS 		代码段寄存器
   580 0000031A 8B 54 24 2C                     		MOV 	EDX, [ESP+32+12] 	; 应用程序ESP 		堆栈指针寄存器
   581 0000031E 8B 5C 24 30                     		MOV 	EBX, [ESP+32+16] 	; 应用程序DS/SS 		数据段寄存器、堆栈段寄存器
   582 00000322 8B 6C 24 34                     		MOV 	EBP, [ESP+32+20] 	; tss.esp0的地址
   583 00000326                                 
   584 00000326                                 		; 保存操作系统的栈指针
   585 00000326 89 65 00                        		MOV 	[EBP], ESP
   586 00000329 8C 55 04                        		MOV 	[EBP+4], SS
   587 0000032C                                 
   588 0000032C                                 		; 填入应用程序的段寄存器
   589 0000032C 8E C3                           		MOV 	ES, BX
   590 0000032E 8E DB                           		MOV 	DS, BX
   591 00000330 8E E3                           		MOV 	FS, BX
   592 00000332 8E EB                           		MOV 	GS, BX
   593 00000334                                 
   594 00000334                                 		; 下面调整栈，以免用RETF跳转到应用程序
   595 00000334 83 C9 03                        		OR 		ECX, 3 				; 将应用程序的段号和3进行OR运算
   596 00000337 83 CB 03                        		OR 		EBX, 3 				; 将应用程序的段号和3进行OR运算
   597 0000033A                                 
   598 0000033A 53                              		PUSH 	EBX 				; 应用程序的SS
   599 0000033B 52                              		PUSH 	EDX 				; 应用程序的ESP
   600 0000033C 51                              		PUSH 	ECX 				; 应用程序的CS
   601 0000033D 50                              		PUSH 	EAX 				; 应用程序的EIP
   602 0000033E                                 
   603 0000033E                                 		; retf应用程序，进入用户调用
   604 0000033E CB                              		RETF
   605 0000033F                                 		; 应用程序结束后不会回到这里